// <auto-generated />
using System;
using CloudManagementAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CloudManagementAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CloudManagementAPI.Models.CloudResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CloudResources", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("CloudManagementAPI.Models.StorageBucket", b =>
                {
                    b.HasBaseType("CloudManagementAPI.Models.CloudResource");

                    b.Property<int>("CapacityGb")
                        .HasColumnType("int");

                    b.Property<bool>("IsEncrypted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.ToTable("StorageBuckets", (string)null);
                });

            modelBuilder.Entity("CloudManagementAPI.Models.VirtualMachine", b =>
                {
                    b.HasBaseType("CloudManagementAPI.Models.CloudResource");

                    b.Property<int>("CPUCores")
                        .HasColumnType("int");

                    b.Property<string>("OS")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RAMGb")
                        .HasColumnType("int");

                    b.ToTable("VirtualMachines", (string)null);
                });

            modelBuilder.Entity("CloudManagementAPI.Models.StorageBucket", b =>
                {
                    b.HasOne("CloudManagementAPI.Models.CloudResource", null)
                        .WithOne()
                        .HasForeignKey("CloudManagementAPI.Models.StorageBucket", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CloudManagementAPI.Models.VirtualMachine", b =>
                {
                    b.HasOne("CloudManagementAPI.Models.CloudResource", null)
                        .WithOne()
                        .HasForeignKey("CloudManagementAPI.Models.VirtualMachine", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
